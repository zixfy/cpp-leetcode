// Áªô‰Ω†‰∏Ä‰∏™‰∫åÁª¥Êï¥Êï∞Êï∞ÁªÑ envelopes ÔºåÂÖ∂‰∏≠ envelopes[i] = [wi, hi] ÔºåË°®Á§∫Á¨¨ i
// ‰∏™‰ø°Â∞ÅÁöÑÂÆΩÂ∫¶ÂíåÈ´òÂ∫¶„ÄÇ
//
//  ÂΩìÂè¶‰∏Ä‰∏™‰ø°Â∞ÅÁöÑÂÆΩÂ∫¶ÂíåÈ´òÂ∫¶ÈÉΩÊØîËøô‰∏™‰ø°Â∞ÅÂ§ßÁöÑÊó∂ÂÄôÔºåËøô‰∏™‰ø°Â∞ÅÂ∞±ÂèØ‰ª•ÊîæËøõÂè¶‰∏Ä‰∏™‰ø°Â∞ÅÈáåÔºåÂ¶ÇÂêå‰øÑÁΩóÊñØÂ•óÂ®É‰∏ÄÊ†∑„ÄÇ
//
//  ËØ∑ËÆ°ÁÆó ÊúÄÂ§öËÉΩÊúâÂ§öÂ∞ë‰∏™
//  ‰ø°Â∞ÅËÉΩÁªÑÊàê‰∏ÄÁªÑ‚Äú‰øÑÁΩóÊñØÂ•óÂ®É‚Äù‰ø°Â∞ÅÔºàÂç≥ÂèØ‰ª•Êää‰∏Ä‰∏™‰ø°Â∞ÅÊîæÂà∞Âè¶‰∏Ä‰∏™‰ø°Â∞ÅÈáåÈù¢Ôºâ„ÄÇ
//
//  Ê≥®ÊÑèÔºö‰∏çÂÖÅËÆ∏ÊóãËΩ¨‰ø°Â∞Å„ÄÇ
//
//  Á§∫‰æã 1Ôºö
//
//
// ËæìÂÖ•Ôºöenvelopes = [[5,4],[6,4],[6,7],[2,3]]
// ËæìÂá∫Ôºö3
// Ëß£ÈáäÔºöÊúÄÂ§ö‰ø°Â∞ÅÁöÑ‰∏™Êï∞‰∏∫ 3, ÁªÑÂêà‰∏∫: [2,3] => [5,4] => [6,7]„ÄÇ
//
//  Á§∫‰æã 2Ôºö
//
//
// ËæìÂÖ•Ôºöenvelopes = [[1,1],[1,1],[1,1]]
// ËæìÂá∫Ôºö1
//
//
//
//
//  ÊèêÁ§∫Ôºö
//
//
//  1 <= envelopes.length <= 10‚Åµ
//  envelopes[i].length == 2
//  1 <= wi, hi <= 10‚Åµ
//
//
//  Related Topics Êï∞ÁªÑ ‰∫åÂàÜÊü•Êâæ Âä®ÊÄÅËßÑÂàí ÊéíÂ∫è üëç 901 üëé 0

#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right)
      : val(x), left(left), right(right) {}
};

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);
template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>);
template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p);
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);

template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>) {
  ((std::cout << (I == 0 ? "" : ", ") << std::get<I>(tup)), ...);
}

template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup) {
  o << "(";
  printTupleHelper(tup, std::make_index_sequence<sizeof...(Args)>());
  return o << ")" << std::endl;
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p) {
  return o << "(" << p.first << ", " << p.second << ")";
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p) {
  o << "map {";
  for (const auto &a : p)
    o << a.first << " : " << a.second << ", ";
  return o << "}\n";
}

template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v) {
  o << "array [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

// leetcode submit region begin(Prohibit modification and deletion)
template <typename T>
std::ostream &operator<<(std::ostream &o, const std::vector<T> &v) {
  o << "vector [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}
template <typename T, typename Comp>
auto right_lower_bound(
    const vector<T> &arr, const T &x, int r,
    Comp cmp = [](const auto &a, const auto &b) { return a <= b; }) {
  // [l, r)
  int l = -1;
  while (l + 1 < r) {
    auto m = (l + r) >> 1;
    const auto &mid_val = arr[m];
    if (cmp(mid_val, x))
      l = m;
    else
      r = m;
  }
  return l < 0 ? arr.end() : arr.begin() + l;
}

class Solution {
public:
  int maxEnvelopes(vector<vector<int>> &envelopes) {
    std::sort(envelopes.begin(), envelopes.end(),
              [](const auto &a, const auto &b) {
                if (a[0] != b[0])
                  return a[0] < b[0];
                return a[1] < b[1];
              });
    vector dp(envelopes.size(), 0);
    cout << envelopes << endl;
    for (int i = 0, n = envelopes.size(); i < n; ++i) {
      auto iter = right_lower_bound(envelopes, envelopes[i], i,
                                    [](const auto &a, const auto &b) {
                                      return a[0] < b[0] && a[1] < b[1];
                                    });

      if (iter == envelopes.end())
        dp[i] = 1, cout << "nullptr" << endl;
      else
        cout << iter - envelopes.begin() << endl, dp[i] = 1 + dp[iter - envelopes.begin()];
    }
    cout << dp << endl;
    return *max_element(dp.begin(), dp.end());
  }
};
// leetcode submit region end(Prohibit modification and deletion)
