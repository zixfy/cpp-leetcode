// Áªô‰Ω†‰∏Ä‰∏™ m x n ÁöÑÊï¥Êï∞ÁΩëÊ†ºÂõæ grid Ôºå‰Ω†ÂèØ‰ª•‰ªé‰∏Ä‰∏™Ê†ºÂ≠êÁßªÂä®Âà∞ 4
// ‰∏™ÊñπÂêëÁõ∏ÈÇªÁöÑ‰ªªÊÑè‰∏Ä‰∏™Ê†ºÂ≠ê„ÄÇ
//
//  ËØ∑‰Ω†ËøîÂõûÂú®ÁΩëÊ†ºÂõæ‰∏≠‰ªé ‰ªªÊÑè Ê†ºÂ≠êÂá∫ÂèëÔºåËææÂà∞ ‰ªªÊÑè Ê†ºÂ≠êÔºå‰∏îË∑ØÂæÑ‰∏≠ÁöÑÊï∞Â≠óÊòØ
//  ‰∏•Ê†ºÈÄíÂ¢û ÁöÑË∑ØÂæÑÊï∞ÁõÆ„ÄÇÁî±‰∫éÁ≠îÊ°àÂèØËÉΩ‰ºöÂæàÂ§ßÔºåËØ∑Â∞ÜÁªìÊûúÂØπ 10‚Åπ + 7 Âèñ‰Ωô ÂêéËøî
// Âõû„ÄÇ
//
//  Â¶ÇÊûú‰∏§Êù°Ë∑ØÂæÑ‰∏≠ËÆøÈóÆËøáÁöÑÊ†ºÂ≠ê‰∏çÊòØÂÆåÂÖ®Áõ∏ÂêåÁöÑÔºåÈÇ£‰πàÂÆÉ‰ª¨ËßÜ‰∏∫‰∏§Êù°‰∏çÂêåÁöÑË∑ØÂæÑ„ÄÇ
//
//
//
//  Á§∫‰æã 1Ôºö
//
//
//
//  ËæìÂÖ•Ôºögrid = [[1,1],[3,4]]
// ËæìÂá∫Ôºö8
// Ëß£ÈáäÔºö‰∏•Ê†ºÈÄíÂ¢ûË∑ØÂæÑÂåÖÊã¨Ôºö
//- ÈïøÂ∫¶‰∏∫ 1 ÁöÑË∑ØÂæÑÔºö[1]Ôºå[1]Ôºå[3]Ôºå[4] „ÄÇ
//- ÈïøÂ∫¶‰∏∫ 2 ÁöÑË∑ØÂæÑÔºö[1 -> 3]Ôºå[1 -> 4]Ôºå[3 -> 4] „ÄÇ
//- ÈïøÂ∫¶‰∏∫ 3 ÁöÑË∑ØÂæÑÔºö[1 -> 3 -> 4] „ÄÇ
// Ë∑ØÂæÑÊï∞ÁõÆ‰∏∫ 4 + 3 + 1 = 8 „ÄÇ
//
//
//  Á§∫‰æã 2Ôºö
//
//  ËæìÂÖ•Ôºögrid = [[1],[2]]
// ËæìÂá∫Ôºö3
// Ëß£ÈáäÔºö‰∏•Ê†ºÈÄíÂ¢ûË∑ØÂæÑÂåÖÊã¨Ôºö
//- ÈïøÂ∫¶‰∏∫ 1 ÁöÑË∑ØÂæÑÔºö[1]Ôºå[2] „ÄÇ
//- ÈïøÂ∫¶‰∏∫ 2 ÁöÑË∑ØÂæÑÔºö[1 -> 2] „ÄÇ
// Ë∑ØÂæÑÊï∞ÁõÆ‰∏∫ 2 + 1 = 3 „ÄÇ
//
//
//
//
//  ÊèêÁ§∫Ôºö
//
//
//  m == grid.length
//  n == grid[i].length
//  1 <= m, n <= 1000
//  1 <= m * n <= 10‚Åµ
//  1 <= grid[i][j] <= 10‚Åµ
//
//
//  Related Topics Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Âõæ ÊãìÊâëÊéíÂ∫è ËÆ∞ÂøÜÂåñÊêúÁ¥¢ Êï∞ÁªÑ
//  Âä®ÊÄÅËßÑÂàí Áü©Èòµ üëç 34 üëé 0

#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right)
      : val(x), left(left), right(right) {}
};

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};

// leetcode submit region begin(Prohibit modification and deletion)
namespace std {
template <typename U, typename V> struct hash<pair<U, V>> {
  size_t operator()(const pair<U, V> &p) const {
    return std::hash<U>()(p.first) ^ (std::hash<V>()(p.second) << 1);
  }
};
} // namespace std
constexpr int MOD = 1e9 + 7;
class Solution {
public:
  int countPaths(vector<vector<int>> &grid) {
    const auto m = grid.size(), n = grid[0].size();
    unordered_map<pair<int, int>, int> dp;
    function<int(int, int)> mem_dp = [&dp, &grid, m, n, &mem_dp](int i, int j) {
      auto coords = make_pair(i, j);
      if (dp.count(coords) == 0) {
        int cnt = 1;
        for (auto [x, y] : initializer_list<pair<int, int>>{
                 {i, j + 1}, {i, j - 1}, {i + 1, j}, {i - 1, j}})
          if (x > -1 && x < m && y > -1 && y < n && grid[i][j] < grid[x][y])
            cnt = (cnt + mem_dp(x, y)) % MOD;
        dp[coords] = cnt;
        return cnt;
      }
      return dp[coords];
    };
    int ans = 0;
    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        ans = (ans + mem_dp(i, j)) % MOD;
    return ans;
  }
};
// leetcode submit region end(Prohibit modification and deletion)
