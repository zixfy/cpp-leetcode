// ÂäõÊâ£ÂòâÂπ¥Âçé‰∏∫‰∫ÜÁ°Æ‰øùÊõ¥ËàíÈÄÇÁöÑÊ∏∏ËßàÁéØÂ¢ÉÊù°‰ª∂ÔºåÂú®‰ºöÂú∫ÁöÑÂêÑÂ§ÑËÆæÁΩÆ‰∫ÜÊπøÂ∫¶Ë∞ÉËäÇË£ÖÁΩÆÔºåËøô‰∫õË∞ÉËäÇË£ÖÁΩÆÂèóÊéß‰∫éÊÄªÊéßÂÆ§‰∏≠ÁöÑ‰∏ÄÂè∞ÊéßÂà∂Âô®„ÄÇ
// ÊéßÂà∂Âô®‰∏≠Â∑≤ÁªèÈ¢ÑËÆæ‰∫Ü‰∏Ä‰∫õË∞ÉËäÇÊåá‰ª§ÔºåÊï¥Êï∞Êï∞ÁªÑ`operate[i]` Ë°®Á§∫Á¨¨ `i`
// Êù°Êåá‰ª§Â¢ûÂä†Á©∫Ê∞îÊπøÂ∫¶ÁöÑÂ§ßÂ∞è„ÄÇÁé∞Âú®‰Ω†ÂèØ‰ª•Â∞Ü‰ªªÊÑèÊï∞ÈáèÁöÑÊåá‰ª§‰øÆÊîπ‰∏∫Èôç‰ΩéÊπøÂ∫¶ÔºàÂèòÂåñÁöÑ
// Êï∞ÂÄº‰∏çÂèòÔºâÔºå‰ª•Á°Æ‰øùÊπøÂ∫¶Â∞ΩÂèØËÉΩÁöÑÈÄÇÂÆúÔºö
//- ÊéßÂà∂Âô®‰ºöÈÄâÊã© **‰∏ÄÊÆµËøûÁª≠ÁöÑÊåá‰ª§** Ôºå‰ªéËÄåËøõË°åÊπøÂ∫¶Ë∞ÉËäÇÁöÑÊìç‰ΩúÔºõ
//- ËøôÊÆµÊåá‰ª§ÊúÄÁªàÂØπÊπøÂ∫¶ÂΩ±ÂìçÁöÑÁªùÂØπÂÄºÔºåÂç≥‰∏∫ÂΩìÂâçÊìç‰ΩúÁöÑ„Äå‰∏çÈÄÇÂÆúÂ∫¶„Äç
//- Âú®ÊéßÂà∂Âô®ÊâÄÊúâÂèØËÉΩÁöÑÊìç‰Ωú‰∏≠Ôºå**ÊúÄÂ§ß** ÁöÑ„Äå‰∏çÈÄÇÂÆúÂ∫¶„ÄçÂç≥‰∏∫„ÄåÊï¥‰Ωì‰∏çÈÄÇÂÆúÂ∫¶„Äç
//
// ËØ∑ËøîÂõûÂú®ÊâÄÊúâ‰øÆÊîπÊåá‰ª§ÁöÑÊñπÊ°à‰∏≠ÔºåÂèØ‰ª•ÂæóÂà∞ÁöÑ **ÊúÄÂ∞è** „ÄåÊï¥‰Ωì‰∏çÈÄÇÂÆúÂ∫¶„Äç„ÄÇ
//
//**Á§∫‰æã 1Ôºö**
//
//> ËæìÂÖ•Ôºö`operate = [5,3,7]`
//>
//> ËæìÂá∫Ôºö`8`
//>
//> Ëß£ÈáäÔºöÂØπ‰∫éÊñπÊ°à `2` ÁöÑ `[5,3,-7]`
//> Êìç‰ΩúÊåá‰ª§ `[5],[3],[-7]` ÁöÑ„Äå‰∏çÈÄÇÂÆúÂ∫¶„ÄçÂàÜÂà´‰∏∫ `5,3,7`
//> Êìç‰ΩúÊåá‰ª§ `[5,3],[3,-7]` ÁöÑ„Äå‰∏çÈÄÇÂÆúÂ∫¶„ÄçÂàÜÂà´‰∏∫ `8,4`
//> Êìç‰ΩúÊåá‰ª§ `[5,3,-7]` ÁöÑ„Äå‰∏çÈÄÇÂÆúÂ∫¶„Äç‰∏∫ `1`Ôºå
//> Âõ†Ê≠§ÂØπ‰∫éÊñπÊ°à `[5,3,-7]`ÁöÑ„ÄåÊï¥‰Ωì‰∏çÈÄÇÂÆúÂ∫¶„Äç‰∏∫
//`8`ÔºåÂÖ∂‰ΩôÊñπÊ°àÁöÑ„ÄåÊï¥‰Ωì‰∏çÈÄÇÂÆúÂ∫¶„ÄçÂùá‰∏çÂ∞è‰∫é `8`ÔºåÂ¶Ç‰∏ãË°®ÊâÄÁ§∫Ôºö >
//![image.png](https://pic.leetcode-cn.com/1663902759-dgDCxn-image.png)
//
//**Á§∫‰æã 2Ôºö**
//
//> ËæìÂÖ•Ôºö`operate = [20,10]`
//>
//> ËæìÂá∫Ôºö`20`
//
//**ÊèêÁ§∫Ôºö**
//- `1 <= operate.length <= 1000`
//- `1 <= operate[i] <= 1000`
//
//  Related Topics Êï∞ÁªÑ Âä®ÊÄÅËßÑÂàí üëç 14 üëé 0

#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right)
      : val(x), left(left), right(right) {}
};

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);
template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>);
template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p);
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);

template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>) {
  ((std::cout << (I == 0 ? "" : ", ") << std::get<I>(tup)), ...);
}

template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup) {
  o << "(";
  printTupleHelper(tup, std::make_index_sequence<sizeof...(Args)>());
  return o << ")" << std::endl;
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p) {
  return o << "(" << p.first << ", " << p.second << ")";
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p) {
  o << "map {";
  for (const auto &a : p)
    o << a.first << " : " << a.second << ", ";
  return o << "}\n";
}

template <typename T>
std::ostream &operator<<(std::ostream &o, const std::vector<T> &v) {
  o << "vector [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v) {
  o << "array [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

// leetcode submit region begin(Prohibit modification and deletion)
template <typename... Args, typename T> auto maxx(T fa, Args... args) {
  if constexpr (sizeof...(args) == 0)
    return fa;
  else
    return max(fa, maxx(args...));
}
template <typename... Args, typename T> auto print(T fa, Args... args) {
  cout << fa << ", ";
  if constexpr (sizeof...(args) > 0)
    print(args...);
  cout << endl;
}
class Solution {
public:
  int unSuitability(vector<int> &operate) {
    int ans = 0;
    const auto n = operate.size();
    int min_pos=0, max_neg=0;
    for (auto o : operate) {
      auto t1 = min_pos - o, t2 = max_neg + o;
      min_pos = max(min_pos, t2);
      max_neg = min(max_neg, t1);
      ans = max(ans, max(min_pos, -max_neg));
    }
    return ans;
  }
};
// leetcode submit region end(Prohibit modification and deletion)
