// ‰∏∫‰∫ÜÁºìËß£„ÄåÂäõÊâ£ÂòâÂπ¥Âçé„ÄçÊúüÈó¥ÁöÑ‰∫∫ÊµÅÂéãÂäõÔºåÁªÑÂßî‰ºöÂú®Ê¥ªÂä®ÊúüÈó¥ÂºÄËÆæ‰∫Ü‰∏Ä‰∫õ‰∫§ÈÄö‰∏ìÁ∫ø„ÄÇ`path[i]
// = [a, b]` Ë°®Á§∫Êúâ‰∏ÄÊù°‰ªéÂú∞ÁÇπ `a`ÈÄöÂæÄÂú∞ÁÇπ `b` ÁöÑ
//  **ÂçïÂêë** ‰∫§ÈÄö‰∏ìÁ∫ø„ÄÇ
// Ëã•Â≠òÂú®‰∏Ä‰∏™Âú∞ÁÇπÔºåÊª°Ë∂≥‰ª•‰∏ãË¶ÅÊ±ÇÔºåÊàë‰ª¨ÂàôÁß∞‰πã‰∏∫ **‰∫§ÈÄöÊû¢Á∫Ω**Ôºö
//- ÊâÄÊúâÂú∞ÁÇπÔºàÈô§Ëá™Ë∫´Â§ñÔºâÂùáÊúâ‰∏ÄÊù° **ÂçïÂêë** ‰∏ìÁ∫ø **Áõ¥Êé•** ÈÄöÂæÄËØ•Âú∞ÁÇπÔºõ
//- ËØ•Âú∞ÁÇπ‰∏çÂ≠òÂú®‰ªª‰Ωï **ÈÄöÂæÄÂÖ∂‰ªñÂú∞ÁÇπ** ÁöÑÂçïÂêë‰∏ìÁ∫ø„ÄÇ
//
// ËØ∑ËøîÂõû‰∫§ÈÄö‰∏ìÁ∫øÁöÑ **‰∫§ÈÄöÊû¢Á∫Ω**„ÄÇËã•‰∏çÂ≠òÂú®ÔºåÂàôËøîÂõû `-1`„ÄÇ
//
//**Ê≥®ÊÑèÔºö**
//- ÂØπ‰∫é‰ªªÊÑè‰∏Ä‰∏™Âú∞ÁÇπÔºåËá≥Â∞ëË¢´‰∏ÄÊù°‰∏ìÁ∫øËøûÈÄö„ÄÇ
//
//**Á§∫‰æã 1Ôºö**
//
//> ËæìÂÖ•Ôºö`path = [[0,1],[0,3],[1,3],[2,0],[2,3]]`
//>
//> ËæìÂá∫Ôºö`3`
//>
//> Ëß£ÈáäÔºöÂ¶Ç‰∏ãÂõæÊâÄÁ§∫Ôºö
//> Âú∞ÁÇπ `0,1,2` ÂêÑÊúâ‰∏ÄÊù°ÈÄöÂæÄÂú∞ÁÇπ `3` ÁöÑ‰∫§ÈÄö‰∏ìÁ∫øÔºå
//> ‰∏îÂú∞ÁÇπ `3` ‰∏çÂ≠òÂú®‰ªª‰Ωï**ÈÄöÂæÄÂÖ∂‰ªñÂú∞ÁÇπ**ÁöÑ‰∫§ÈÄö‰∏ìÁ∫ø„ÄÇ
//> ![image.png](https://pic.leetcode-cn.com/1663902572-yOlUCr-image.png)
//
//**Á§∫‰æã 2Ôºö**
//
//> ËæìÂÖ•Ôºö`path = [[0,3],[1,0],[1,3],[2,0],[3,0],[3,2]]`
//>
//> ËæìÂá∫Ôºö`-1`
//>
//> Ëß£ÈáäÔºöÂ¶Ç‰∏ãÂõæÊâÄÁ§∫Ôºö‰∏çÂ≠òÂú®Êª°Ë∂≥ **‰∫§ÈÄöÊû¢Á∫Ω** ÁöÑÂú∞ÁÇπ„ÄÇ
//> ![image.png](https://pic.leetcode-cn.com/1663902595-McsEkY-image.png)
//
//**ÊèêÁ§∫Ôºö**
//- `1 <= path.length <= 1000`
//- `0 <= path[i][0], path[i][1] <= 1000`
//- `path[i][0]` ‰∏é `path[i][1]` ‰∏çÁõ∏Á≠â
//
//  Related Topics Âõæ üëç 8 üëé 0

#include <bits/stdc++.h>
using namespace std;
// leetcode submit region begin(Prohibit modification and deletion)
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, const std::pair<U, V> &v) {
  return o << "(" << v.first << " " << v.second << ")";
}
template <typename T>
std::ostream &operator<<(std::ostream &o, const std::vector<T> &v) {
  o << "span [";
  for (auto iter = v.begin(); iter != v.end(); ++iter)
    o << *iter << ((iter != v.end() - 1) ? ", " : "");
  return o << "]";
}

class Solution {
public:
  int transportationHub(vector<vector<int>> &path);
};
int Solution::transportationHub(vector<vector<int>> &path) {
  array<pair<int, int>, 1007> degs{};
  // (indeg, outdeg)
  int n{};
  for (const auto &p : path) {
    n = max(n, p[1]);
    n = max(n, p[0]);
    degs[p[0]].second++;
    degs[p[1]].first++;
  }
  ++n;
//  cout << "n: " << n << endl;
//  cout << vector(degs.begin(), degs.begin() + n) << endl;
  for (decltype(n) i{}; i < n; ++i) {
    if (degs[i].second == 0 && degs[i].first == n - 1)
      return i;
  }
  return -1;
}
// leetcode submit region end(Prohibit modification and deletion)
