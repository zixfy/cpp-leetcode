// ÂäõÊâ£ÂòâÂπ¥ÂçéÂ∞Ü‰∏æÂäû‰∏ÄÁ≥ªÂàóÂ±ïËßàÊ¥ªÂä®ÔºåÂêéÂã§ÈÉ®Â∞ÜË¥üË¥£‰∏∫ÊØèÂú∫Â±ïËßàÊèê‰æõÊâÄÈúÄË¶ÅÁöÑÂ±ïÂè∞„ÄÇ
// Â∑≤Áü•ÂêéÂã§ÈÉ®ÂæóÂà∞‰∫Ü‰∏Ä‰ªΩÈúÄÊ±ÇÊ∏ÖÂçïÔºåËÆ∞ÂΩï‰∫ÜËøëÊúüÂ±ïËßàÊâÄÈúÄË¶ÅÁöÑÂ±ïÂè∞Á±ªÂûãÔºå `demand[i][j]`
// Ë°®Á§∫Á¨¨ `i` Â§©Â±ïËßàÊó∂Á¨¨ `j` ‰∏™Â±ïÂè∞ÁöÑÁ±ªÂûã„ÄÇ
// Âú®Êª°Ë∂≥ÊØè‰∏ÄÂ§©Â±ïÂè∞ÈúÄÊ±ÇÁöÑÂü∫Á°Ä‰∏äÔºåËØ∑ËøîÂõûÂêéÂã§ÈÉ®ÈúÄË¶ÅÂáÜÂ§áÁöÑ **ÊúÄÂ∞è** Â±ïÂè∞Êï∞Èáè„ÄÇ
//
//**Ê≥®ÊÑèÔºö**
//- Âêå‰∏ÄÂ±ïÂè∞Âú®‰∏çÂêåÂ§©‰∏≠ÂèØ‰ª•ÈáçÂ§ç‰ΩøÁî®„ÄÇ
//
//**Á§∫‰æã 1Ôºö**
//
//> ËæìÂÖ•Ôºö`demand = ["acd","bed","accd"]`
//>
//> ËæìÂá∫Ôºö`6`
//>
//> Ëß£ÈáäÔºö
//> Á¨¨ `0` Â§©ÈúÄË¶ÅÂ±ïÂè∞ `a„ÄÅc„ÄÅd`Ôºõ
//> Á¨¨ `1` Â§©ÈúÄË¶ÅÂ±ïÂè∞ `b„ÄÅe„ÄÅd`Ôºõ
//> Á¨¨ `2` Â§©ÈúÄË¶ÅÂ±ïÂè∞ `a„ÄÅc„ÄÅc„ÄÅd`Ôºõ
//> Âõ†Ê≠§ÔºåÂêéÂã§ÈÉ®ÂáÜÂ§á `abccde` ÁöÑÂ±ïÂè∞ÔºåÂèØ‰ª•Êª°Ë∂≥ÊØèÂ§©ÁöÑÂ±ïËßàÈúÄÊ±Ç;
//
//**Á§∫‰æã 2Ôºö**
//
//> ËæìÂÖ•Ôºö`demand = ["abc","ab","ac","b"]`
//>
//> ËæìÂá∫Ôºö`3`
//
//**ÊèêÁ§∫Ôºö**
//- `1 <= demand.length,demand[i].length <= 100`
//- `demand[i][j]` ‰ªÖ‰∏∫Â∞èÂÜôÂ≠óÊØç
//
//  Related Topics Êï∞ÁªÑ ÂìàÂ∏åË°® Â≠óÁ¨¶‰∏≤ ËÆ°Êï∞ üëç 7 üëé 0

#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right)
      : val(x), left(left), right(right) {}
};

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);
template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>);
template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p);
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);

template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>) {
  ((std::cout << (I == 0 ? "" : ", ") << std::get<I>(tup)), ...);
}

template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup) {
  o << "(";
  printTupleHelper(tup, std::make_index_sequence<sizeof...(Args)>());
  return o << ")" << std::endl;
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p) {
  return o << "(" << p.first << ", " << p.second << ")";
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p) {
  o << "map {";
  for (const auto &a : p)
    o << a.first << " : " << a.second << ", ";
  return o << "}\n";
}

template <typename T>
std::ostream &operator<<(std::ostream &o, const std::vector<T> &v) {
  o << "vector [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v) {
  o << "array [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

// leetcode submit region begin(Prohibit modification and deletion)
class Solution {
public:
  int minNumBooths(vector<string> &demand) {
    unordered_map<char, size_t> ans;
    for (const auto &d : demand) {
      multiset cnt(d.begin(), d.end());
      for (auto c: cnt)
        ans[c] = max(ans[c], cnt.count(c));
    }
    int _ = 0;
    for (auto [k, v] : ans)
      _ += v;
    return _;
  }
};
// leetcode submit region end(Prohibit modification and deletion)
