// Â∏ÉÂ∞îË°®ËææÂºè ÊòØËÆ°ÁÆóÁªìÊûú‰∏çÊòØ true Â∞±ÊòØ false
// ÁöÑË°®ËææÂºè„ÄÇÊúâÊïàÁöÑË°®ËææÂºèÈúÄÈÅµÂæ™‰ª•‰∏ãÁ∫¶ÂÆöÔºö
//
//
//  't'ÔºåËøêÁÆóÁªìÊûú‰∏∫ true
//  'f'ÔºåËøêÁÆóÁªìÊûú‰∏∫ false
//  '!(subExpr)'ÔºåËøêÁÆóËøáÁ®ã‰∏∫ÂØπÂÜÖÈÉ®Ë°®ËææÂºè subExpr ËøõË°å ÈÄªËæëÈùûÔºàNOTÔºâËøêÁÆó
//  '&(subExpr1, subExpr2, ..., subExprn)'ÔºåËøêÁÆóËøáÁ®ã‰∏∫ÂØπ 2 ‰∏™Êàñ‰ª•‰∏äÂÜÖÈÉ®Ë°®ËææÂºè
//  subExpr1, subExpr2,
//  ..., subExprn ËøõË°å ÈÄªËæë‰∏éÔºàANDÔºâËøêÁÆó
//  '|(subExpr1, subExpr2, ..., subExprn)'ÔºåËøêÁÆóËøáÁ®ã‰∏∫ÂØπ 2 ‰∏™Êàñ‰ª•‰∏äÂÜÖÈÉ®Ë°®ËææÂºè
//  subExpr1, subExpr2,
//  ..., subExprn ËøõË°å ÈÄªËæëÊàñÔºàORÔºâËøêÁÆó
//
//
//  Áªô‰Ω†‰∏Ä‰∏™‰ª•Â≠óÁ¨¶‰∏≤ÂΩ¢ÂºèË°®Ëø∞ÁöÑ Â∏ÉÂ∞îË°®ËææÂºè expressionÔºåËøîÂõûËØ•ÂºèÁöÑËøêÁÆóÁªìÊûú„ÄÇ
//
//  È¢òÁõÆÊµãËØïÁî®‰æãÊâÄÁªôÂá∫ÁöÑË°®ËææÂºèÂùá‰∏∫ÊúâÊïàÁöÑÂ∏ÉÂ∞îË°®ËææÂºèÔºåÈÅµÂæ™‰∏äËø∞Á∫¶ÂÆö„ÄÇ
//
//
//
//  Á§∫‰æã 1Ôºö
//
//
// ËæìÂÖ•Ôºöexpression = "&(|(f))"
// ËæìÂá∫Ôºöfalse
// Ëß£ÈáäÔºö
// È¶ñÂÖàÔºåËÆ°ÁÆó |(f) --> f ÔºåË°®ËææÂºèÂèò‰∏∫ "&(f)" „ÄÇ
// Êé•ÁùÄÔºåËÆ°ÁÆó &(f) --> f ÔºåË°®ËææÂºèÂèò‰∏∫ "f" „ÄÇ
// ÊúÄÂêéÔºåËøîÂõû false „ÄÇ
//
//
//  Á§∫‰æã 2Ôºö
//
//
// ËæìÂÖ•Ôºöexpression = "|(f,f,f,t)"
// ËæìÂá∫Ôºötrue
// Ëß£ÈáäÔºöËÆ°ÁÆó (false OR false OR false OR true) ÔºåÁªìÊûú‰∏∫ true „ÄÇ
//
//
//  Á§∫‰æã 3Ôºö
//
//
// ËæìÂÖ•Ôºöexpression = "!(&(f,t))"
// ËæìÂá∫Ôºötrue
// Ëß£ÈáäÔºö
// È¶ñÂÖàÔºåËÆ°ÁÆó &(f,t) --> (false AND true) --> false --> f ÔºåË°®ËææÂºèÂèò‰∏∫ "!(f)" „ÄÇ
// Êé•ÁùÄÔºåËÆ°ÁÆó !(f) --> NOT false --> true ÔºåËøîÂõû true „ÄÇ
//
//
//
//
//  ÊèêÁ§∫Ôºö
//
//
//  1 <= expression.length <= 2 * 10‚Å¥
//  expression[i] ‰∏∫ '('„ÄÅ')'„ÄÅ'&'„ÄÅ'|'„ÄÅ'!'„ÄÅ't'„ÄÅ'f' Âíå ',' ‰πã‰∏Ä
//
//
//  Related Topics Ê†à ÈÄíÂΩí Â≠óÁ¨¶‰∏≤ üëç 198 üëé 0

#include <algorithm>
#include <array>
#include <memory>
#include <queue>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using u64 = std::uint64_t;
using i64 = std::int64_t;
using i8 = std::int8_t;
using u8 = std::uint8_t;
// leetcode submit region begin(Prohibit modification and deletion)
#include "stack"
#include "variant"
using namespace std;
class Solution {
public:
  enum class State { Expr, Not, Or, And };
  bool parseBoolExpr(string expression) {
    auto pivot = 0;
    stack<pair<bool, State>> stack;
    stack.emplace(false, State::Expr);
    while (!stack.empty()) {
      auto &[res, state] = stack.top();
      if (expression[pivot] == ')')
        ++pivot;
      else if (expression[pivot] == 't') {
        ++pivot;
        res = true;
      } else if (expression[pivot] == 'f') {
        ++pivot;
        res = false;
      } else if (expression[pivot] == '!') {
        state = State::Not;
        pivot += 2;
        stack.emplace(false, State::Expr);
        continue;
      } else if (expression[pivot] == '&') {
        state = State::And;
        res = true;
        pivot += 2;
        stack.emplace(false, State::Expr);
        continue;
      } else {
        state = State::Or;
        pivot += 2;
        stack.emplace(false, State::Expr);
        continue;
      }

      //      cout << "pivot= " << pivot;
      //      cout << " res = " << res << ", state =" << int(state) << endl;
      if (stack.size() == 1)
        return res;
      auto tmp = res;

      //?
      stack.pop();
      auto &[lres, lst] = stack.top();
      if (lst == State::Not)
        lres = !tmp;
      else if (lst == State::Or)
        lres |= tmp;
      else if (lst == State::And)
        lres &= tmp;
      if (expression[pivot] == ',') {
        ++pivot;
        stack.emplace(false, State::Expr);
      }
    }
    return true;
  }
};
// leetcode submit region end(Prohibit modification and deletion)
