// Âú® `n*m` Â§ßÂ∞èÁöÑÊ£ãÁõò‰∏≠ÔºåÊúâÈªëÁôΩ‰∏§ÁßçÊ£ãÂ≠êÔºåÈªëÊ£ãËÆ∞‰ΩúÂ≠óÊØç `"X"`, ÁôΩÊ£ãËÆ∞‰ΩúÂ≠óÊØç
// `"O"`ÔºåÁ©∫‰Ωô‰ΩçÁΩÆËÆ∞‰Ωú `"."`„ÄÇÂΩìËêΩ‰∏ãÁöÑÊ£ãÂ≠ê‰∏éÂÖ∂‰ªñÁõ∏ÂêåÈ¢úËâ≤ÁöÑÊ£ã
// Â≠êÂú®Ë°å„ÄÅÂàóÊàñÂØπËßíÁ∫øÂÆåÂÖ®ÂåÖÂõ¥Ôºà‰∏≠Èó¥‰∏çÂ≠òÂú®Á©∫ÁôΩ‰ΩçÁΩÆÔºâÂè¶‰∏ÄÁßçÈ¢úËâ≤ÁöÑÊ£ãÂ≠êÔºåÂàôÂèØ‰ª•ÁøªËΩ¨Ëøô‰∫õÊ£ãÂ≠êÁöÑÈ¢úËâ≤„ÄÇ
//
//![1.gif](https://pic.leetcode-cn.com/1630396029-eTgzpN-6da662e67368466a96d203
// f67bb6e793.gif){:height=170px}![2.gif](https://pic.leetcode-cn.com/1630396240-
// nMvdcc-8e4261afe9f60e05a4f740694b439b6b.gif){:height=170px}![3.gif](https://pic.
// leetcode-cn.com/1630396291-kEtzLL-6fcb682daeecb5c3f56eb88b23c81d33.gif){:height=170
// px}
//
// „ÄåÂäõÊâ£ÊåëÊàòËµõ„ÄçÈªëÁôΩÁøªËΩ¨Ê£ãÈ°πÁõÆ‰∏≠ÔºåÂ∞ÜÊèê‰æõÁªôÈÄâÊâã‰∏Ä‰∏™Êú™ÂΩ¢ÊàêÂèØÁøªËΩ¨Ê£ãÂ≠êÁöÑÊ£ãÁõòÊÆãÂ±ÄÔºåÂÖ∂Áä∂ÊÄÅËÆ∞‰Ωú
// `chessboard`„ÄÇËã•‰∏ã‰∏ÄÊ≠•ÂèØÊîæÁΩÆ‰∏ÄÊûöÈªëÊ£ãÔºåËØ∑ÈóÆÈÄâÊâãÊúÄÂ§öËÉΩÁøªËΩ¨ Â§öÂ∞ëÊûöÁôΩÊ£ã„ÄÇ
//
//**Ê≥®ÊÑèÔºö**
//- Ëã•ÁøªËΩ¨ÁôΩÊ£ãÊàêÈªëÊ£ãÂêéÔºåÊ£ãÁõò‰∏ä‰ªçÂ≠òÂú®ÂèØ‰ª•ÁøªËΩ¨ÁöÑÁôΩÊ£ãÔºåÂ∞ÜÂèØ‰ª• **ÁªßÁª≠** ÁøªËΩ¨ÁôΩÊ£ã
//- ËæìÂÖ•Êï∞ÊçÆ‰øùËØÅÂàùÂßãÊ£ãÁõòÁä∂ÊÄÅÊó†ÂèØ‰ª•ÁøªËΩ¨ÁöÑÊ£ãÂ≠ê‰∏îÂ≠òÂú®Á©∫‰Ωô‰ΩçÁΩÆ
//
//**Á§∫‰æã 1Ôºö**
//
//> ËæìÂÖ•Ôºö`chessboard = ["....X.","....X.","XOOO..","......","......"]`
//>
//> ËæìÂá∫Ôºö`3`
//>
//> Ëß£ÈáäÔºö
//> ÂèØ‰ª•ÈÄâÊã©‰∏ãÂú® `[2,4]` Â§ÑÔºåËÉΩÂ§üÁøªËΩ¨ÁôΩÊñπ‰∏âÊûöÊ£ãÂ≠ê„ÄÇ
//
//**Á§∫‰æã 2Ôºö**
//
//> ËæìÂÖ•Ôºö`chessboard = [".X.",".O.","XO."]`
//>
//> ËæìÂá∫Ôºö`2`
//>
//> Ëß£ÈáäÔºö
//> ÂèØ‰ª•ÈÄâÊã©‰∏ãÂú® `[2,2]` Â§ÑÔºåËÉΩÂ§üÁøªËΩ¨ÁôΩÊñπ‰∏§ÊûöÊ£ãÂ≠ê„ÄÇ
//> ![2126c1d21b1b9a9924c639d449cc6e65.gif](https://pic.leetcode-cn.com/16266832
// 55-OBtBud-2126c1d21b1b9a9924c639d449cc6e65.gif)
//
//**Á§∫‰æã 3Ôºö**
//
//> ËæìÂÖ•Ôºö`chessboard =
//[".......",".......",".......","X......",".O.....","..O....
//","....OOX"]`
//>
//> ËæìÂá∫Ôºö`4`
//>
//> Ëß£ÈáäÔºö
//> ÂèØ‰ª•ÈÄâÊã©‰∏ãÂú® `[6,3]` Â§ÑÔºåËÉΩÂ§üÁøªËΩ¨ÁôΩÊñπÂõõÊûöÊ£ãÂ≠ê„ÄÇ
//> ![803f2f04098b6174397d6c696f54d709.gif](https://pic.leetcode-cn.com/16303937
// 70-Puyked-803f2f04098b6174397d6c696f54d709.gif)
//
//**ÊèêÁ§∫Ôºö**
//- `1 <= chessboard.length, chessboard[i].length <= 8`
//- `chessboard[i]` ‰ªÖÂåÖÂê´ `"."„ÄÅ"O"` Âíå `"X"`
//
//  Related Topics ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Êï∞ÁªÑ Áü©Èòµ üëç 16 üëé 0

#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right)
      : val(x), left(left), right(right) {}
};

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);
template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>);
template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p);
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);

// leetcode submit region begin(Prohibit modification and deletion)

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p) {
  o << "map {";
  for (const auto &a : p)
    o << a.first << " : " << a.second << ", ";
  return o << "}\n";
}

template <typename T>
std::ostream &operator<<(std::ostream &o, const std::vector<T> &v) {
  o << "vector [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}
template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>) {
  ((std::cout << (I == 0 ? "" : ", ") << std::get<I>(tup)), ...);
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p) {
  return o << "(" << p.first << ", " << p.second << ")";
}

template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup) {
  o << "(";
  printTupleHelper(tup, std::make_index_sequence<sizeof...(Args)>());
  return o << ")" << std::endl;
}
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v) {
  o << "array [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}
enum Dot : char { BLANK = '.', BLACK = 'X', WHITE = 'O' };
using xy = pair<int, int>;
constexpr auto dirs = []() -> array<xy, 8> {
  array<xy, 8> res;
  for (int i = -1, idx = 0; i < 2; ++i)
    for (int j = -1; j < 2; ++j)
      if (i || j)
        res[idx].first = i, res[idx++].second = j;
  return res;
}();
class Solution {
public:
  int flipChess(vector<string> &chessboard) {
    int ans = 0;
    const auto m = chessboard.size(), n = chessboard[0].length();
    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        if (chessboard[i][j] == Dot::BLANK) {
          auto tmp = chessboard;
          auto cnt = 0;
          queue<xy> q;
          q.emplace(i, j);
          tmp[i][j] = Dot::BLACK;

          while (!q.empty()) {
            auto [ci, cj] = q.front();
            for (const auto [di, dj] : dirs)
              for (auto ni = ci + di, nj = cj + dj;
                   ni > -1 && ni < m && nj > -1 && nj < n; ni += di, nj += dj) {
                if (tmp[ni][nj] == Dot::BLANK)
                  break;
                else if (tmp[ni][nj] == Dot::BLACK) {
                  for (auto ti = ci + di, tj = cj + dj; ti != ni || tj != nj;
                       ti += di, tj += dj) {
                    q.emplace(ti, tj);

                    tmp[ti][tj] = Dot::BLACK;
                    ++cnt;
                  }
                  break;
                }
              }
            q.pop();
          }
          ans = max(ans, cnt);
        }
    return ans;
  }
};
// leetcode submit region end(Prohibit modification and deletion)
