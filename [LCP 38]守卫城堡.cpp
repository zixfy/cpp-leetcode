//ÂüéÂ†°ÂÆàÂç´Ê∏∏ÊàèÁöÑËÉúÂà©Êù°‰ª∂‰∏∫‰ΩøÊÅ∂È≠îÊó†Ê≥ï‰ªéÂá∫ÁîüÁÇπÂà∞ËææÂüéÂ†°„ÄÇÊ∏∏ÊàèÂú∞ÂõæÂèØËßÜ‰Ωú `2*N` ÁöÑÊñπÊ†ºÂõæÔºåËÆ∞‰ΩúÂ≠óÁ¨¶‰∏≤Êï∞ÁªÑ `grid`ÔºåÂÖ∂‰∏≠Ôºö
//- `"."` Ë°®Á§∫ÊÅ∂È≠îÂèØÈöèÊÑèÈÄöË°åÁöÑÂπ≥Âú∞Ôºõ
//- `"#"` Ë°®Á§∫ÊÅ∂È≠î‰∏çÂèØÈÄöËøáÁöÑÈöúÁ¢çÁâ©ÔºåÁé©ÂÆ∂ÂèØÈÄöËøáÂú® **Âπ≥Âú∞** ‰∏äËÆæÁΩÆÈöúÁ¢çÁâ©ÔºåÂç≥Â∞Ü `"."` Âèò‰∏∫ `"#"` ‰ª•ÈòªÊå°ÊÅ∂È≠îÂâçËøõÔºõ
//- `"S"` Ë°®Á§∫ÊÅ∂È≠îÂá∫ÁîüÁÇπÔºåÂ∞ÜÊúâÂ§ßÈáèÁöÑÊÅ∂È≠îËØ•ÁÇπÁîüÊàêÔºåÊÅ∂È≠îÂèØÂêë‰∏ä/Âêë‰∏ã/ÂêëÂ∑¶/ÂêëÂè≥ÁßªÂä®Ôºå‰∏îÊó†Ê≥ïÁßªÂä®Ëá≥Âú∞ÂõæÂ§ñÔºõ
//- `"P"` Ë°®Á§∫Áû¨ÁßªÁÇπÔºåÁßªÂä®Âà∞ `"P"` ÁÇπÁöÑÊÅ∂È≠îÂèØË¢´‰º†ÈÄÅËá≥‰ªªÊÑè‰∏Ä‰∏™ `"P"` ÁÇπÔºå‰πüÂèØÈÄâÊã©‰∏ç‰º†ÈÄÅÔºõ
//- `"C"` Ë°®Á§∫ÂüéÂ†°„ÄÇ
//
//ÁÑ∂ËÄåÂú®Ê∏∏Êàè‰∏≠Áî®‰∫éÂª∫ÈÄ†ÈöúÁ¢çÁâ©ÁöÑÈáëÈí±ÊòØÊúâÈôêÁöÑÔºåËØ∑ËøîÂõûÁé©ÂÆ∂ÊúÄÂ∞ëÈúÄË¶ÅÊîæÁΩÆÂá†‰∏™ÈöúÁ¢çÁâ©ÊâçËÉΩËé∑ÂæóËÉúÂà©„ÄÇËã•Êó†ËÆ∫ÊÄéÊ†∑ÊîæÁΩÆÈöúÁ¢çÁâ©ÂùáÊó†Ê≥ïËé∑ËÉúÔºåËØ∑ËøîÂõû `-1`„ÄÇ
//
//**Ê≥®ÊÑèÔºö**
//- Âú∞Âõæ‰∏äÂèØËÉΩÊúâ‰∏Ä‰∏™ÊàñÂ§ö‰∏™Âá∫ÁîüÁÇπ
//- Âú∞Âõæ‰∏äÊúâ‰∏îÂè™Êúâ‰∏Ä‰∏™ÂüéÂ†°
//
//**Á§∫‰æã 1**
//
//> ËæìÂÖ•Ôºö`grid = ["S.C.P#P.", ".....#.S"]`
//>
//> ËæìÂá∫Ôºö`3`
//>
//> Ëß£ÈáäÔºöËá≥Â∞ëÈúÄË¶ÅÊîæÁΩÆ‰∏â‰∏™ÈöúÁ¢çÁâ©
//> ![image.png](https://pic.leetcode-cn.com/1614828255-uuNdNJ-image.png)
//
//**Á§∫‰æã 2Ôºö**
//
//> ËæìÂÖ•Ôºö`grid = ["SP#P..P#PC#.S", "..#P..P####.#"]`
//>
//> ËæìÂá∫Ôºö`-1`
//>
//> Ëß£ÈáäÔºöÊó†ËÆ∫ÊÄéÊ†∑‰øÆÁ≠ëÈöúÁ¢çÁâ©ÔºåÂùáÊó†Ê≥ïÈòªÊå°ÊúÄÂ∑¶‰æßÂá∫ÁîüÁöÑÊÅ∂È≠îÂà∞ËææÂüéÂ†°‰ΩçÁΩÆ
//> ![image.png](https://pic.leetcode-cn.com/1614828208-oFlpVs-image.png)
//
//**Á§∫‰æã 3Ôºö**
//
//> ËæìÂÖ•Ôºö`grid = ["SP#.C.#PS", "P.#...#.P"]`
//>
//> ËæìÂá∫Ôºö`0`
//>
//> Ëß£ÈáäÔºöÊó†ÈúÄÊîæÁΩÆÈöúÁ¢çÁâ©Âç≥ÂèØËé∑ÂæóËÉúÂà©
//> ![image.png](https://pic.leetcode-cn.com/1614828242-oveClu-image.png)
//
//**Á§∫‰æã 4Ôºö**
//
//> ËæìÂÖ•Ôºö`grid = ["CP.#.P.", "...S..S"]`
//>
//> ËæìÂá∫Ôºö`4`
//>
//> Ëß£ÈáäÔºöËá≥Â∞ëÈúÄË¶ÅÊîæÁΩÆ 4 ‰∏™ÈöúÁ¢çÁâ©ÔºåÁ§∫ÊÑèÂõæ‰∏∫ÊîæÁΩÆÊñπÊ≥ï‰πã‰∏Ä
//> ![image.png](https://pic.leetcode-cn.com/1614828218-sIAYkb-image.png)
//
//**ÊèêÁ§∫Ôºö**
//- `grid.length == 2`
//- `2 <= grid[0].length == grid[1].length <= 10^4`
//- `grid[i][j]` ‰ªÖÂåÖÂê´Â≠óÁ¨¶ `"."`„ÄÅ`"#"`„ÄÅ`"C"`„ÄÅ`"P"`„ÄÅ`"S"`
//
// Related Topics Êï∞ÁªÑ Âä®ÊÄÅËßÑÂàí Áü©Èòµ üëç 12 üëé 0


#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right)
      : val(x), left(left), right(right) {}
};

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);
template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>);
template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p);
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);

template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>) {
  ((std::cout << (I == 0 ? "" : ", ") << std::get<I>(tup)), ...);
}

template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup) {
  o << "(";
  printTupleHelper(tup, std::make_index_sequence<sizeof...(Args)>());
  return o << ")" << std::endl;
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p) {
  return o << "(" << p.first << ", " << p.second << ")";
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p) {
  o << "map {";
  for (const auto &a : p)
    o << a.first << " : " << a.second << ", ";
  return o << "}\n";
}

template <typename T>
std::ostream &operator<<(std::ostream &o, const std::vector<T> &v) {
  o << "vector [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v) {
  o << "array [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
public:
    int guardCastle(vector<string>& grid) {

    }
};
//leetcode submit region end(Prohibit modification and deletion)




