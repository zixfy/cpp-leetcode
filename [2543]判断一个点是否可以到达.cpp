//Áªô‰Ω†‰∏Ä‰∏™Êó†Á©∑Â§ßÁöÑÁΩëÊ†ºÂõæ„ÄÇ‰∏ÄÂºÄÂßã‰Ω†Âú® (1, 1) Ôºå‰Ω†ÈúÄË¶ÅÈÄöËøáÊúâÈôêÊ≠•ÁßªÂä®Âà∞ËææÁÇπ (targetX, targetY) „ÄÇ 
//
// ÊØè‰∏ÄÊ≠• Ôºå‰Ω†ÂèØ‰ª•‰ªéÁÇπ (x, y) ÁßªÂä®Âà∞‰ª•‰∏ãÁÇπ‰πã‰∏ÄÔºö 
//
// 
// (x, y - x) 
// (x - y, y) 
// (2 * x, y) 
// (x, 2 * y) 
// 
//
// Áªô‰Ω†‰∏§‰∏™Êï¥Êï∞ targetX Âíå targetY ÔºåÂàÜÂà´Ë°®Á§∫‰Ω†ÊúÄÂêéÈúÄË¶ÅÂà∞ËææÁÇπÁöÑ X Âíå Y ÂùêÊ†á„ÄÇÂ¶ÇÊûú‰Ω†ÂèØ‰ª•‰ªé (1, 1) Âá∫ÂèëÂà∞ËææËøô‰∏™ÁÇπÔºåËØ∑‰Ω†ËøîÂõû
//true ÔºåÂê¶ÂàôËøîÂõû false „ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// ËæìÂÖ•ÔºötargetX = 6, targetY = 9
//ËæìÂá∫Ôºöfalse
//Ëß£ÈáäÔºöÊ≤°Ê≥ï‰ªé (1,1) Âá∫ÂèëÂà∞Ëææ (6,9) ÔºåÊâÄ‰ª•ËøîÂõû false „ÄÇ
// 
//
// Á§∫‰æã 2Ôºö 
//
// ËæìÂÖ•ÔºötargetX = 4, targetY = 7
//ËæìÂá∫Ôºötrue
//Ëß£ÈáäÔºö‰Ω†ÂèØ‰ª•ÊåâÁÖß‰ª•‰∏ãË∑ØÂæÑÂà∞ËææÔºö(1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7) „ÄÇ
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= targetX, targetY <= 10‚Åπ 
// 
//
// Related Topics Êï∞Â≠¶ Êï∞ËÆ∫ üëç 17 üëé 0


#include <bits/stdc++.h>
using namespace std;
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right)
      : val(x), left(left), right(right) {}
};

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);
template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>);
template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p);
template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p);
template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v);

template <typename T, size_t... I>
void printTupleHelper(const T &tup, std::index_sequence<I...>) {
  ((std::cout << (I == 0 ? "" : ", ") << std::get<I>(tup)), ...);
}

template <typename... Args>
std::ostream &operator<<(std::ostream &o, const std::tuple<Args...> &tup) {
  o << "(";
  printTupleHelper(tup, std::make_index_sequence<sizeof...(Args)>());
  return o << ")" << std::endl;
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::pair<U, V> p) {
  return o << "(" << p.first << ", " << p.second << ")";
}

template <typename U, typename V>
std::ostream &operator<<(std::ostream &o, std::unordered_map<U, V> p) {
  o << "map {";
  for (const auto &a : p)
    o << a.first << " : " << a.second << ", ";
  return o << "}\n";
}

template <typename T>
std::ostream &operator<<(std::ostream &o, const std::vector<T> &v) {
  o << "vector [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

template <typename T, size_t N>
std::ostream &operator<<(std::ostream &o, const std::array<T, N> &v) {
  o << "array [";
  for (const auto &a : v)
    cout << a << ", ";
  return o << "]";
}

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
public:
    bool isReachable(int targetX, int targetY) {
        
    }
};
//leetcode submit region end(Prohibit modification and deletion)




